name: build-latest
on:
  workflow_dispatch:
  pull_request:
    branches:
      - master
    paths:
      - 'Dockerfile'
      - 'scripts/**'
      - 'build_data/**'
      - '.github/workflows/**'
  push:
    branches:
      - master
jobs:
  build-backup-image:
    if: |
      github.actor != 'dependabot[bot]' &&
      !(
        contains(github.event.pull_request.title, '[skip-release]') ||
        contains(github.event.comment.body, '/skiprelease')
      )
    runs-on: ubuntu-latest
    strategy:
      matrix:
        postgresMajorVersion:
          - 17
        postgisMajorVersion:
          - 3
        postgisMinorRelease:
          - 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build image for testing
        id: docker_build_testing_image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: false
          load: true
          tags: golav/pg-backup:manual-build
          outputs: type=docker,dest=/tmp/pg-backup.tar
          build-args: |
            POSTGRES_MAJOR_VERSION=${{ matrix.postgresMajorVersion }}
            POSTGIS_MAJOR_VERSION=${{ matrix.postgisMajorVersion }}
            POSTGIS_MINOR_VERSION=${{ matrix.postgisMinorRelease }}
          cache-from: |
            type=gha,scope=test
            type=gha,scope=prod
            type=gha,scope=base
          cache-to: type=gha,scope=test
          target: postgis-backup-test
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: golav-pg-backup
          path: /tmp/pg-backup.tar

  run-scenario-tests:
    if: |
      github.actor != 'dependabot[bot]' &&
      !(
        contains(github.event.pull_request.title, '[skip-release]') ||
        contains(github.event.comment.body, '/skiprelease')
      )
    runs-on: ubuntu-latest
    needs: [ build-backup-image ]
    strategy:
      matrix:
        scenario:
          - restore
          - s3
    steps:
      - uses: actions/checkout@v4
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: golav-pg-backup
          path: /tmp
      - name: Load image
        run: |
          docker load --input /tmp/pg-backup.tar

      - name: Run scenario test ${{ matrix.scenario }}
        working-directory: scenario_tests/${{ matrix.scenario }}
        env:
          COMPOSE_INTERACTIVE_NO_CLI: 1
          PRINT_TEST_LOGS: 1
        run: |
          bash ./test.sh

  push-internal-pr-images:
    if: |
      github.event_name == 'pull_request' && 
      github.event.pull_request.base.repo.url == github.event.pull_request.head.repo.url && 
      github.actor != 'dependabot[bot]'  &&
      !(
        contains(github.event.pull_request.title, '[skip-release]') ||
        contains(github.event.comment.body, '/skiprelease')
      )
    runs-on: ubuntu-latest
    needs: [ build-backup-image ]
    steps:
      - uses: actions/checkout@v4
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: golav-pg-backup
          path: /tmp
      - name: Load image
        run: |
          docker load --input /tmp/pg-backup.tar
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_REPO}}/pg-backup
          tags: |
            type=semver,pattern={{version}}
            type=ref,event=branch
            type=ref,event=pr

      
